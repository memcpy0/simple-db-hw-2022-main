package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * 用于join两张表的谓词
     */
    private JoinPredicate p;
    private TupleDesc td;

    /**
     * 表1的元组迭代器
     */
    private OpIterator child1;
    /**
     * 表2的元组迭代器
     */
    private OpIterator child2;

    /**
     * 孩子迭代器
     */
    private OpIterator[] children;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // TODO: some code goes here
        this.p = p;
        // 连接时，返回的元组的tupleDesc必须是两个表的tupleDesc之和
        this.td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.child1 = child1;
        this.child2 = child2;
        this.children = new OpIterator[]{child1, child2};
    }

    public JoinPredicate getJoinPredicate() {
        // TODO: some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // TODO: some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // TODO: some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // TODO: some code goes here
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // TODO: some code goes here
        child1.open();
        child2.open();
        super.open(); // 启动这个Operator
    }

    public void close() {
        // TODO: some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // TODO: some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * 保存tuple1, tuple2的引用
     */
    private Tuple tuple1 = null;
    private Tuple tuple2 = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation.
     * Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * 因此，如果一个等值谓词被使用，则join属性会在结果中存在两份。可以移除其中一列，使用额外的projection
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // 对每个child1的tuple，分别连接child2的tuple
        // TODO: some code goes here
        // 如果child1有下个，或者tuple1还没用完，则继续迭代
        while (child1.hasNext() || tuple1 != null) {
            if (tuple1 == null) tuple1 = child1.next(); // 一开始初始化tuple1
            int n = tuple1.getTupleDesc().numFields();
            // 先找到满足join条件的两个元组，进行合并
            Tuple newTuple = new Tuple(td);
            while (child2.hasNext()) { // 从当前child2所处的状态获取下个元组
                tuple2 = child2.next();
                boolean filter = p.filter(tuple1, tuple2);
                if (filter) {
                    for (int i = 0; i < td.numFields(); ++i) {
                        if (i < n)
                            newTuple.setField(i, tuple1.getField(i));
                        else
                            newTuple.setField(i, tuple2.getField(i - n));
                    }
                    return newTuple;
                }
            }
            // tuple1存在，但child2没有下个，此时rewind child2，同时获取下个tuple1
            child2.rewind();
            if (child1.hasNext()) tuple1 = child1.next();
            else tuple1 = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
        this.children = children;
    }
}
